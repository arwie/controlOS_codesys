// SPDX-FileCopyrightText: 2025 Artur Wiebe <artur@4wiebe.de>
// SPDX-License-Identifier: MIT

PROGRAM co_can
VAR
	SdoRead:	CIA405.SDO_READ4;
	SdoWrite:	CIA405.SDO_WRITE4;
END_VAR

////////////////////////////////

IF app.cmd.co.func < 0 OR (app.cmd.co.func = 0 AND (app.fbk.co.done OR app.fbk.co.error)) THEN

	app.fbk.co.done  := FALSE;
	app.fbk.co.error := FALSE;


	SdoRead(
		ENABLE := app.cmd.co.func = -1,
		NETWORK := app.cmd.co.master,
		DEVICE := UINT_TO_USINT(app.cmd.co.slave),
		CHANNEL := 0,
		INDEX := app.cmd.co.index,
		SUBINDEX := app.cmd.co.subIndex,
		TIMEOUT := 250,
	);
	MEMUtils.MemCpy(ADR(app.fbk.co.data), ADR(SdoRead.DATA), 4);
	MEMUtils.SwapLocalToIntel(ADR(app.fbk.co.data), 4); //function only swaps on big endian systems
	app.fbk.co.done  := app.fbk.co.done  OR SdoRead.CONFIRM;
	app.fbk.co.error := app.fbk.co.error OR UINT_TO_BOOL(SdoRead.ERROR);


	MEMUtils.MemCpy(ADR(SdoWrite.DATA), ADR(app.cmd.co.data), 4);
	MEMUtils.SwapLocalToIntel(ADR(SdoWrite.DATA[1]), 4); //function only swaps on big endian systems
	SdoWrite(
		ENABLE := app.cmd.co.func = -2,
		NETWORK := app.cmd.co.master,
		DEVICE := UINT_TO_USINT(app.cmd.co.slave),
		CHANNEL := 0,
		INDEX := app.cmd.co.index,
		SUBINDEX := app.cmd.co.subIndex,
		DATALENGTH := app.cmd.co.dataLength,
		TIMEOUT := 250,
	);
	app.fbk.co.done  := app.fbk.co.done  OR SdoWrite.CONFIRM;
	app.fbk.co.error := app.fbk.co.error OR UINT_TO_BOOL(SdoWrite.ERROR);

END_IF
